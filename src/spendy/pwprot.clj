(ns spendy.pwprot
  (:import (java.security MessageDigest Security)))

;;generate n random chars
(defn gensalt [n] 
  (let [charseq (map char (concat
			   (range 48 58)     ; 0-9
			   (range 97 123)))] ; 0-z
    (apply str
	   (take n
		 (repeatedly #(rand-nth charseq))))))

;;core digesting algorithm. Hash salt+password then iterate on result
(defn digester [hasher salt pw-clear iter]
  (letfn [(hashme [hv] ;;iterate to increase work factor
		  (letfn [(oneround [hv]
				    (do (.reset hasher)
					(.digest hasher hv)))]
		    (nth (iterate oneround hv) iter)))]
      (.reset hasher)
      (.update hasher (.getBytes salt))
      (.update hasher (.getBytes pw-clear))
      (hashme (.digest hasher))))

;; convert byte array to base36 chars
(defn b36 [hbytes] (.toString (BigInteger. 1 hbytes) 36))

;; generate password protect & verify functions
(defn pwfuncs
  "Returns a map of two complimentary functions:
     :digest - generates a salted iterated hash from a password.
     :verify - tests a password against the digest generated by :digest
   Arguments
     hashalg - any legal java digest function, e.g. 'SHA-256' or 'MD5'
             - also SHA-1, SHA, SHA-384, SHA-512, SHA1, MD2
     saltlen - chars of salt, used to inhibit dictionary attacks
     iterations - number of times the hash is iterated"
  [hashalg saltlen iterations]
  
  ;;Java hash algorithm
  (def jhash (MessageDigest/getInstance hashalg))
  
  ;;map of 2 complimentary functions to digest and verify passwords
  ;;this map is the return value of pwfuncs
  {:digest (fn [pw-clear]
	     (let [salt (gensalt saltlen)
		   hashout (digester jhash salt pw-clear iterations)]
	       (str salt (b36 hashout))))
   :verify (fn [pw-clear pw-protected]
	     (let [salt (apply str (take saltlen pw-protected))
		   hashout (digester jhash salt pw-clear iterations)]
	       (= pw-protected
		  (str salt (b36 hashout)))))})

;;test SHA-256 with 16 bytes salt and 10k iterations
(def strongPWHasher (pwfuncs "SHA-256" 16 10000))
((strongPWHasher :verify) "orig" ((strongPWHasher :digest) "orig")) ;true
((strongPWHasher :verify) "fake" ((strongPWHasher :digest) "orig")) ;false

;;convenience functions for strongPWHasher digest and verify
(def protect-password (strongPWHasher :digest))
(def verify-password (strongPWHasher :verify))

;;test convenience functions
;(def stored-pw-digest (protect-password "squeamish"))
;(verify-password "squeamish" stored-pw-digest) ;true
;(verify-password "guess" stored-pw-digest) ;false

;; other examples
;;(def weakPWHasher (pwfuncs "MD5" 0 0))
;;(def protectPasswordWeak (weakPWHasher :digest))
;;(def verifyPasswordWeak (weakPWHasher :verify))

;;(def veryStrongPWHasher (pwfuncs "SHA-512" 32 100000))
;;(def protectPasswordVS (veryStrongPWHasher :digest))
;;(def verifyPasswordVS (veryStrongPWHasher :verify))
